# 개요(Overview)
이 프로젝트는 Jira와 Confluence, Slack을 연동하여 매주 자동으로 배포 일정 리포트(주간 배포 리스트)를 생성·업데이트하고, 관련 담당자에게 Slack 알림을 전송하는 자동화 시스템입니다.
반복적이고 수동적인 배포 일정 관리 업무를 자동화하여, 개발팀과 운영팀의 효율성을 높이고, 배포 일정의 투명성과 추적성을 강화합니다.

# 주요 기능(Core Features)
- **Jira 이슈 조회 및 필터링**: 지정된 기간(주간) 동안의 배포 관련 Jira 이슈를 자동으로 조회합니다.
- **Confluence 페이지 생성/업데이트**: Jira 이슈 정보를 기반으로 주간 배포 리스트 페이지를 Confluence에 자동 생성하거나 업데이트합니다.
- **동적 Jira 매크로 테이블**: Confluence 페이지 내에 Jira 이슈 매크로를 삽입하여, 항상 최신 이슈 정보를 동적으로 표시합니다.
- **배포티켓 링크 테이블**: 각 Jira 이슈와 연결된 배포티켓(issuelinks)을 표로 정리하여 제공합니다.
- **Slack 알림**: 배포티켓 생성/수정, Confluence 페이지 생성/업데이트 시 담당자 및 승인자에게 Slack 알림을 자동 전송합니다.
- **이슈 변경 감지 및 스냅샷 관리**: 이전 이슈 상태와 비교하여 변경이 있을 때만 페이지/알림을 갱신합니다.
- **크론(crontab) 자동 실행**: 매주/매일 정해진 시간에 자동으로 스크립트가 실행되도록 지원합니다.

# 사용자 경험(User Experience)
- **주요 사용자**: 개발팀, 운영팀, QA팀, PO 등 배포 일정에 관심 있는 모든 조직 구성원
- **주요 흐름**:
  1. 매주 월요일 오전 10시, 다음 주 배포 일정 리포트가 자동 생성됨
  2. 평일(월~금) 오전 9시~오후 8시, 이슈 변경 시마다 리포트가 자동 업데이트됨
  3. 담당자/승인자는 Slack 알림을 통해 즉시 배포 일정 변동을 인지하고, Confluence 링크로 상세 내용을 확인
- **UI/UX 고려사항**: 별도의 UI는 없으며, Confluence 페이지와 Slack 메시지가 주요 인터페이스입니다. 표와 링크는 가독성, 접근성을 고려해 구성됩니다.

# 기술 아키텍처(Technical Architecture)
- **시스템 구성요소**:
  - Python 스크립트(create_weekly_report.py)
  - Jira API, Confluence API, Slack Webhook API
  - .env 환경설정 파일, 크론(crontab)
- **데이터 모델**:
  - Jira 이슈(배포 일정, issuelinks, assignee 등)
  - Confluence 페이지(주간 배포 리스트)
  - Slack 메시지(담당자/승인자 멘션)
  - 스냅샷/알림키 JSON 파일(변경 감지 및 중복 알림 방지)
- **API 및 연동**:
  - atlassian-python-api 라이브러리(Jira/Confluence)
  - Slack Webhook(메시지 전송)
- **인프라 요구사항**:
  - Python 3.x 환경, 외부 네트워크 접근 가능
  - 주기적 실행을 위한 crontab 등록

# 개발 로드맵(Development Roadmap)
- **MVP 요구사항**:
  - Jira 이슈 조회 및 필터링
  - Confluence 페이지 생성/업데이트 및 Jira 매크로/배포티켓 테이블 삽입
  - Slack 알림(담당자/승인자)
  - 이슈 변경 감지 및 스냅샷 관리
  - 크론 자동 실행
- **향후 개선사항**:
  - 알림 대상/채널 설정 UI 제공
  - 다양한 기간/프로젝트별 리포트 확장
  - 에러/예외 상황 자동 복구 및 관리자 알림

# 논리적 개발 순서(Logical Dependency Chain)
1. Jira/Confluence/Slack API 연동 및 인증 구현
2. Jira 이슈 조회 및 데이터 정제
3. Confluence 페이지 생성/업데이트 및 매크로/테이블 삽입
4. Slack 알림 전송 로직 구현
5. 이슈 변경 감지 및 스냅샷/알림키 관리
6. 크론 자동 실행 및 운영환경 배포

# 위험요소 및 대응(Risks and Mitigations)
- **API 인증/권한 오류**: 환경변수 및 API 토큰 관리, 예외처리 강화
- **Jira/Confluence 구조 변경**: 필드명/구조 변경 시 코드 수정 필요, 주요 필드 상수화
- **Slack 알림 누락**: Webhook URL 미설정 시 경고, 중복/누락 방지 로직 적용
- **운영환경 장애**: 크론 로그/에러 로깅, 관리자 수동 점검 프로세스 마련

# 부록(Appendix)
- 주요 환경변수: ATLASSIAN_URL, ATLASSIAN_USERNAME, ATLASSIAN_API_TOKEN, JIRA_PROJECT_KEY, CONFLUENCE_SPACE_KEY, SLACK_WEBHOOK_URL 등
- 사용 라이브러리: atlassian-python-api, python-dotenv, requests
- 예시 크론탭:
  - 매주 월요일 10시: 0 10 * * 1 python3 create_weekly_report.py create
  - 평일 9~20시: 0 9-20 * * 1-5 python3 create_weekly_report.py update
